import { jsPDF } from "jspdf";
import { LegalCase, Property, Tenant, Profile } from "@/types";
import dayjs from "dayjs";

export class DocumentService {
  private static getFooterText(): string {
    return `Generated by Eviction Tracker - ${dayjs().format("MMMM D, YYYY")}`;
  }

  private static addHeader(
    doc: jsPDF,
    title: string,
    subtitle?: string
  ): number {
    const pageWidth = doc.internal.pageSize.getWidth();
    let yPosition = 20;

    // Title
    doc.setFontSize(18);
    doc.setFont("helvetica", "bold");
    doc.text(title, pageWidth / 2, yPosition, { align: "center" });
    yPosition += 10;

    // Subtitle
    if (subtitle) {
      doc.setFontSize(12);
      doc.setFont("helvetica", "normal");
      doc.text(subtitle, pageWidth / 2, yPosition, { align: "center" });
      yPosition += 15;
    } else {
      yPosition += 10;
    }

    // Line separator
    doc.setLineWidth(0.5);
    doc.line(20, yPosition, pageWidth - 20, yPosition);
    yPosition += 15;

    return yPosition;
  }

  private static addFooter(doc: jsPDF): void {
    const pageHeight = doc.internal.pageSize.getHeight();
    const pageWidth = doc.internal.pageSize.getWidth();

    doc.setFontSize(8);
    doc.setFont("helvetica", "normal");
    doc.setTextColor(128);
    doc.text(this.getFooterText(), pageWidth / 2, pageHeight - 10, {
      align: "center",
    });
    doc.setTextColor(0); // Reset to black
  }

  private static formatCurrency(cents: number): string {
    return new Intl.NumberFormat("en-US", {
      style: "currency",
      currency: "USD",
    }).format(cents / 100);
  }

  static generateThirtyDayNotice(
    legalCase: LegalCase,
    property: Property,
    tenant: Tenant,
    landlord: Profile
  ): jsPDF {
    const doc = new jsPDF();
    let yPosition = this.addHeader(
      doc,
      "THIRTY (30) DAY NOTICE TO QUIT FOR NON-PAYMENT OF RENT",
      "State of Maryland"
    );

    // Tenant Information
    doc.setFontSize(12);
    doc.setFont("helvetica", "bold");
    doc.text("TO:", 20, yPosition);
    yPosition += 8;

    doc.setFont("helvetica", "normal");
    doc.text(tenant.tenant_names.join(", "), 35, yPosition);
    yPosition += 6;
    doc.text("AND ALL OTHER OCCUPANTS OF:", 20, yPosition);
    yPosition += 8;

    // Property Address
    doc.setFont("helvetica", "bold");
    doc.text(property.address, 35, yPosition);
    if (property.unit) {
      yPosition += 6;
      doc.text(`Unit ${property.unit}`, 35, yPosition);
    }
    yPosition += 6;
    doc.text(
      `${property.city}, ${property.state} ${property.zip_code}`,
      35,
      yPosition
    );
    yPosition += 15;

    // Notice Body
    doc.setFont("helvetica", "normal");
    const noticeText = [
      "YOU ARE HEREBY NOTIFIED that your tenancy of the above-described premises is hereby",
      "TERMINATED. You are hereby required to QUIT AND SURRENDER the premises to the undersigned",
      "on or before thirty (30) days after service of this notice upon you.",
      "",
      "You are further notified that unless you pay the rent now due and in arrears, in the amount of",
      `${this.formatCurrency(
        legalCase.current_rent_owed
      )} on or before the expiration of thirty (30) days after service of this notice upon you,`,
      "the undersigned will commence legal proceedings to recover possession of said premises,",
      "declare the forfeiture of the lease or rental agreement under which you occupy said premises,",
      "and recover rents, damages, and costs of suit.",
    ];

    noticeText.forEach((line) => {
      doc.text(line, 20, yPosition, { maxWidth: 170 });
      yPosition += 6;
    });

    yPosition += 10;

    // Rent Details
    doc.setFont("helvetica", "bold");
    doc.text("RENT BREAKDOWN:", 20, yPosition);
    yPosition += 8;

    doc.setFont("helvetica", "normal");
    doc.text(
      `Rent Owed at Filing: ${this.formatCurrency(
        legalCase.rent_owed_at_filing
      )}`,
      30,
      yPosition
    );
    yPosition += 6;
    doc.text(
      `Current Rent Owed: ${this.formatCurrency(legalCase.current_rent_owed)}`,
      30,
      yPosition
    );

    if (legalCase.late_fees_charged && legalCase.late_fees_charged > 0) {
      yPosition += 6;
      doc.text(
        `Late Fees: ${this.formatCurrency(legalCase.late_fees_charged)}`,
        30,
        yPosition
      );
    }

    yPosition += 15;

    // Date and Signature
    doc.setFont("helvetica", "normal");
    doc.text(
      `Date: ${dayjs(legalCase.date_initiated).format("MMMM D, YYYY")}`,
      20,
      yPosition
    );
    yPosition += 20;

    doc.text("Landlord/Agent:", 20, yPosition);
    yPosition += 8;
    doc.text(`${landlord.name}`, 20, yPosition);

    if (landlord.business_name) {
      yPosition += 6;
      doc.text(`${landlord.business_name}`, 20, yPosition);
    }

    if (landlord.address) {
      yPosition += 6;
      doc.text(landlord.address, 20, yPosition);
    }

    if (landlord.phone) {
      yPosition += 6;
      doc.text(`Phone: ${landlord.phone}`, 20, yPosition);
    }

    if (landlord.email) {
      yPosition += 6;
      doc.text(`Email: ${landlord.email}`, 20, yPosition);
    }

    this.addFooter(doc);
    return doc;
  }

  static generateCaseSummary(
    legalCase: LegalCase,
    property: Property,
    tenant: Tenant,
    landlord: Profile
  ): jsPDF {
    const doc = new jsPDF();
    let yPosition = this.addHeader(
      doc,
      "LEGAL CASE SUMMARY",
      `Case Type: ${
        legalCase.case_type === "FTPR"
          ? "Failure to Pay Rent"
          : legalCase.case_type
      }`
    );

    // Case Information
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("CASE INFORMATION", 20, yPosition);
    yPosition += 10;

    doc.setFontSize(11);
    doc.setFont("helvetica", "normal");

    const caseInfo = [
      [`Case ID:`, legalCase.id],
      [
        `Case Type:`,
        legalCase.case_type === "FTPR"
          ? "Failure to Pay Rent"
          : legalCase.case_type,
      ],
      [
        `Date Initiated:`,
        dayjs(legalCase.date_initiated).format("MMMM D, YYYY"),
      ],
      [`Current Status:`, legalCase.status.replace("_", " ")],
      [`Payment Status:`, legalCase.payment_status],
      [`Court Case Number:`, legalCase.court_case_number || "Not assigned"],
    ];

    caseInfo.forEach(([label, value]) => {
      doc.setFont("helvetica", "bold");
      doc.text(label, 25, yPosition);
      doc.setFont("helvetica", "normal");
      doc.text(value, 80, yPosition);
      yPosition += 6;
    });

    yPosition += 10;

    // Property Information
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("PROPERTY INFORMATION", 20, yPosition);
    yPosition += 10;

    doc.setFontSize(11);
    doc.setFont("helvetica", "normal");

    const propertyInfo = [
      [`Address:`, property.address],
      [`Unit:`, property.unit || "N/A"],
      [`City:`, `${property.city}, ${property.state} ${property.zip_code}`],
      [`County:`, property.county],
      [`Property Type:`, property.property_type],
    ];

    propertyInfo.forEach(([label, value]) => {
      doc.setFont("helvetica", "bold");
      doc.text(label, 25, yPosition);
      doc.setFont("helvetica", "normal");
      doc.text(value, 80, yPosition);
      yPosition += 6;
    });

    yPosition += 10;

    // Tenant Information
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("TENANT INFORMATION", 20, yPosition);
    yPosition += 10;

    doc.setFontSize(11);
    doc.setFont("helvetica", "normal");

    const tenantInfo = [
      [`Name(s):`, tenant.tenant_names.join(", ")],
      [`Email:`, tenant.email || "Not provided"],
      [`Phone:`, tenant.phone || "Not provided"],
      [
        `Monthly Rent:`,
        tenant.rent_amount
          ? this.formatCurrency(tenant.rent_amount)
          : "Not specified",
      ],
      [
        `Subsidized:`,
        tenant.is_subsidized
          ? `Yes (${tenant.subsidy_type || "Type not specified"})`
          : "No",
      ],
    ];

    tenantInfo.forEach(([label, value]) => {
      doc.setFont("helvetica", "bold");
      doc.text(label, 25, yPosition);
      doc.setFont("helvetica", "normal");
      doc.text(value, 80, yPosition);
      yPosition += 6;
    });

    yPosition += 10;

    // Financial Information
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("FINANCIAL INFORMATION", 20, yPosition);
    yPosition += 10;

    doc.setFontSize(11);
    doc.setFont("helvetica", "normal");

    const financialInfo = [
      [
        `Rent Owed at Filing:`,
        this.formatCurrency(legalCase.rent_owed_at_filing),
      ],
      [`Current Rent Owed:`, this.formatCurrency(legalCase.current_rent_owed)],
      [
        `Late Fees Charged:`,
        legalCase.late_fees_charged
          ? this.formatCurrency(legalCase.late_fees_charged)
          : "$0.00",
      ],
      [`Processing Fee:`, this.formatCurrency(legalCase.price)],
      [
        `No Right of Redemption:`,
        legalCase.no_right_of_redemption ? "Yes" : "No",
      ],
    ];

    financialInfo.forEach(([label, value]) => {
      doc.setFont("helvetica", "bold");
      doc.text(label, 25, yPosition);
      doc.setFont("helvetica", "normal");
      doc.text(value, 100, yPosition);
      yPosition += 6;
    });

    yPosition += 10;

    // Landlord Information
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("LANDLORD INFORMATION", 20, yPosition);
    yPosition += 10;

    doc.setFontSize(11);
    doc.setFont("helvetica", "normal");

    const landlordInfo = [
      [`Name:`, landlord.name],
      [`Business Name:`, landlord.business_name || "N/A"],
      [`Email:`, landlord.email],
      [`Phone:`, landlord.phone || "Not provided"],
      [`Address:`, landlord.address || "Not provided"],
    ];

    landlordInfo.forEach(([label, value]) => {
      doc.setFont("helvetica", "bold");
      doc.text(label, 25, yPosition);
      doc.setFont("helvetica", "normal");
      doc.text(value, 80, yPosition);
      yPosition += 6;
    });

    // Court Information (if available)
    if (
      legalCase.trial_date ||
      legalCase.court_hearing_date ||
      legalCase.court_outcome_notes
    ) {
      yPosition += 10;

      doc.setFontSize(14);
      doc.setFont("helvetica", "bold");
      doc.text("COURT INFORMATION", 20, yPosition);
      yPosition += 10;

      doc.setFontSize(11);
      doc.setFont("helvetica", "normal");

      if (legalCase.trial_date) {
        doc.setFont("helvetica", "bold");
        doc.text("Trial Date:", 25, yPosition);
        doc.setFont("helvetica", "normal");
        doc.text(
          dayjs(legalCase.trial_date).format("MMMM D, YYYY"),
          80,
          yPosition
        );
        yPosition += 6;
      }

      if (legalCase.court_hearing_date) {
        doc.setFont("helvetica", "bold");
        doc.text("Hearing Date:", 25, yPosition);
        doc.setFont("helvetica", "normal");
        doc.text(
          dayjs(legalCase.court_hearing_date).format("MMMM D, YYYY"),
          80,
          yPosition
        );
        yPosition += 6;
      }

      if (legalCase.court_outcome_notes) {
        yPosition += 4;
        doc.setFont("helvetica", "bold");
        doc.text("Court Notes:", 25, yPosition);
        yPosition += 6;
        doc.setFont("helvetica", "normal");
        const notes = doc.splitTextToSize(legalCase.court_outcome_notes, 160);
        doc.text(notes, 25, yPosition);
      }
    }

    this.addFooter(doc);
    return doc;
  }

  static generatePaymentReport(
    cases: LegalCase[],
    landlord: Profile,
    dateRange?: { start: string; end: string }
  ): jsPDF {
    const doc = new jsPDF();
    let yPosition = this.addHeader(
      doc,
      "PAYMENT REPORT",
      dateRange
        ? `${dayjs(dateRange.start).format("MMM D, YYYY")} - ${dayjs(
            dateRange.end
          ).format("MMM D, YYYY")}`
        : "All Time"
    );

    // Landlord Information
    doc.setFontSize(12);
    doc.setFont("helvetica", "bold");
    doc.text("REPORT FOR:", 20, yPosition);
    yPosition += 8;

    doc.setFont("helvetica", "normal");
    doc.text(landlord.name, 20, yPosition);
    if (landlord.business_name) {
      yPosition += 6;
      doc.text(landlord.business_name, 20, yPosition);
    }
    yPosition += 15;

    // Summary Statistics
    const paidCases = cases.filter((c) => c.payment_status === "PAID");
    const unpaidCases = cases.filter((c) => c.payment_status === "UNPAID");
    const partialCases = cases.filter((c) => c.payment_status === "PARTIAL");

    const totalRevenue = paidCases.reduce((sum, c) => sum + c.price, 0);
    const totalOutstanding = unpaidCases.reduce((sum, c) => sum + c.price, 0);

    doc.setFont("helvetica", "bold");
    doc.text("SUMMARY", 20, yPosition);
    yPosition += 10;

    const summaryData = [
      [`Total Cases:`, cases.length.toString()],
      [`Paid Cases:`, paidCases.length.toString()],
      [`Unpaid Cases:`, unpaidCases.length.toString()],
      [`Partial Payment Cases:`, partialCases.length.toString()],
      [`Total Revenue:`, this.formatCurrency(totalRevenue)],
      [`Outstanding Amount:`, this.formatCurrency(totalOutstanding)],
    ];

    summaryData.forEach(([label, value]) => {
      doc.setFont("helvetica", "bold");
      doc.text(label, 25, yPosition);
      doc.setFont("helvetica", "normal");
      doc.text(value, 100, yPosition);
      yPosition += 6;
    });

    yPosition += 15;

    // Case Details
    if (cases.length > 0) {
      doc.setFont("helvetica", "bold");
      doc.text("CASE DETAILS", 20, yPosition);
      yPosition += 10;

      // Table Header
      doc.setFont("helvetica", "bold");
      doc.setFontSize(9);
      doc.text("Date", 20, yPosition);
      doc.text("Property", 50, yPosition);
      doc.text("Status", 110, yPosition);
      doc.text("Payment", 140, yPosition);
      doc.text("Amount", 170, yPosition);
      yPosition += 5;

      // Line under header
      doc.line(20, yPosition, 190, yPosition);
      yPosition += 5;

      // Table Rows
      doc.setFont("helvetica", "normal");
      cases.forEach((legalCase) => {
        if (yPosition > 270) {
          // Check if we need a new page
          doc.addPage();
          yPosition = 20;
        }

        doc.text(
          dayjs(legalCase.date_initiated).format("MM/DD/YY"),
          20,
          yPosition
        );

        const address = legalCase.property?.address || "Unknown";
        const truncatedAddress =
          address.length > 25 ? address.substring(0, 25) + "..." : address;
        doc.text(truncatedAddress, 50, yPosition);

        doc.text(legalCase.status.replace("_", " "), 110, yPosition);
        doc.text(legalCase.payment_status, 140, yPosition);
        doc.text(this.formatCurrency(legalCase.price), 170, yPosition);

        yPosition += 6;
      });
    }

    this.addFooter(doc);
    return doc;
  }
}
